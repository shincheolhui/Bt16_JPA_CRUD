# yaml(*.yml)
#     yet another markup language
#     가벼운 마크업 언어로 사용
#
# 기본 문법
#   # 는 주석
#   기본표현
#      key: value     <- : 다음에는 반드시 공백문자가 와야 함
#
#   key:
#       key_1:
#           key_2:
#               key_3:
#                   ..
# 참조
#   https://lejewk.github.io/yaml-syntax/

# 서버포트 번호
server:
  port: 8080

# 콘솔 ANSI 색상
spring:
  output:
    ansi:
      enabled: always

  # thymeleaf 설정
  thymeleaf:
    cache: false
    prefix: classpath:templates/views/

  # datasource 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/db907?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
    username: user907
    password: 1234

  # JPA 설정
  jpa:
    show-sql: true # JPA에서 생성되는 SQL 문을 콘솔에 출력
    properties:
      hibernate:
        format_sql: true # Query 를 보기 좋게 포맷팅해서 출력(자동 줄바꿈)
    hibernate:
      # DDL(create, alter, drop) 정의시 DB의 고유 기능을 사용할 수 있다.
      # create: 서버 가동할때마다 기존 테이블을 삭제하고 새로 생성
      # create-drop: 기본적으로 create 와 동일한 동작을 하나, 종료시점에서 drop
      # none : production 환경으로 배포할때는 반드시 none 으로 하자.
      # update: DB테이블와 엔티티 매핑정보를 비교해서 변경사항이 있는 경우만 수정 (ALTER). 테이블 없으면 CREATE
      ddl-auto: update
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl # 설정한 이름 그대로 테이블이 생성됨.

#  # security
#  security:
#    user:
#      name: user1     # 디폴트 security username
#      password: 1234   #  password
#
#    # oauth2 client
#    oauth2:
#      client:
#        registration:
#          google:
#            client-id: 148208030996-ckfnonbv5uippt5n105bffun4bmrpuhs.apps.googleusercontent.com
#            client-secret: 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
#            scope:
#              - email
#              - profile
#
#          facebook:
#            # 앱 ID
#            client-id: 895793838846825
#            # 앱 시크릿 코드
#            client-secret: d3c0467048933451a14db4c2ac84f142
#            scope:
#              - email
#              - public_profile
#
#          naver:
#            client-id: LoZNcO09ZVzFQNDmwNyK
#            client-secret: t4chPZIwJV
#            scope:
#              - name
#              - email
#            client-name: Naver
#            authorization-grant-type: authorization_code
#            redirect-uri: http://localhost:8080/login/oauth2/code/naver
#        # provider 제공(google 과 facebook는 기본으로 제공함)
#        provider:
#          naver:
#            authorization-uri: https://nid.naver.com/oauth2.0/authorize
#            token-uri: https://nid.naver.com/oauth2.0/token
#            user-info-uri: https://openapi.naver.com/v1/nid/me
#            user-name-attribute: response
#
#
## MyBatis 매퍼(mapper) 파일 위치 설정
## src/main/resources 이하의 경로 지정
#mybatis:
#  mapper-locations: classpath:mapper/**/*.xml
#
#app:
#  # 파일 업로드 경로
#  upload:
#    path: upload
#
#  # 페이징 관련 세팅값
#  pagination:
#    write_pages: 10  # 기본 write_pages 값. 한 [페이징] 당 몇개의 페이지가 표시되나
#    page_rows: 10   # 기본 page_rows 값.  한 '페이지'에 몇개의 글을 리스트 할것인가?
#
#  # OAuth2
#  oauth2:
#
#    password: 1234
#
#    # Kakao 로그인 관련 세팅값
#    kakao:
#      client-id: 61335c5470325ba740656e9c18f658fc   # 앱 키
#      redirect-uri: http://localhost:8080/oauth2/kakao/callback  # Redirect URI
#      token-uri: https://kauth.kakao.com/oauth/token   # access token 요청 URI
#      user-info-uri: https://kapi.kakao.com/v2/user/me   # 사용자 profile 요청 URI
#
#
#
#
#
